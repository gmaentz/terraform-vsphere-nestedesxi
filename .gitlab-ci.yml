# Image for RPT's CICD Terraform Automated Testing.
image:
  name: registry.gitlab.com/rpt-ops/rpt-tools:stable
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json

cache:
  paths:
    - .terraform

before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - 'echo "DEBUG: Contents of ~/.terraformrc are $(cat ~/.terraformrc)."'
  - terraform --version
  - terraform init
  - echo "CI_MERGE_REQUEST_IID:" $CI_MERGE_REQUEST_IID
  - echo "CI_COMMIT_TAG:" $CI_COMMIT_TAG
  - echo "CI_COMMIT_BRANCH:" $CI_COMMIT_BRANCH
  - echo "CI_COMMIT_REF_NAME:" $CI_COMMIT_REF_NAME
  - echo "CI_DEFAULT_BRANCH:" $CI_DEFAULT_BRANCH
  - echo "CI_PIPELINE_SOURCE" $CI_PIPELINE_SOURCE
  - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME:" $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

stages:
  - validate
  - terratest
  - deploy

# Validate section.
validate:validate:
  stage: validate
  script:
    - terraform validate
  only:
    - branches
    - merge_requests
  tags:
    - linux
    - terraform

validate:format:
  stage: validate
  script:
    - terraform fmt
    - terraform fmt -write=false -diff
  only:
    - branches
    - merge_requests
  tags:
    - linux
    - terraform

validate:lint:
  stage: validate
  script:
    - tflint
  only:
    - branches
    - merge_requests
  tags:
    - linux
    - terraform

validate:tag_validate:
  stage: validate
  script:
    - 'echo "DEBUG: The value of CI_MERGE_REQUEST_TARGET_BRANCH_NAME is ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}."'
    - LATEST_TAG=$(git tag -l | egrep -v "^[^v]" | sort -V | tail -n 1)
    - 'echo "INFO: The latest tag recorded in the repository is ${LATEST_TAG}."'
    - VERSION=$(cat version)
    - 'echo "INFO: The version contained in the file entitled \"version\" is ${VERSION}."'
    - if [[ "${VERSION}" == "${LATEST_TAG}" ]]; then echo "ERROR -- The tag specification recorded in the file entitled \"version\" already exists in the repository."; echo "ERROR -- To proceed, please update that version."; echo "ERROR -- Exiting."; exit 1; fi
  # aaron.daniels(2020-06-11T10:51:25-04:00): If only is omitted, then only: 
  #   ["branches", "tags"] is set by default.
  only:
    refs:
      - master
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^.*master.*$/
  tags:
    - linux
    - terraform

terratest:
  stage: terratest
  script:
    - export GOPATH=/usr/local/bin/go
    - export PATH=$PATH:/usr/local/bin/go/bin:$GOPATH/bin
    # - source ~/.profile
    - echo $PATH
    - 'go mod init "github.com/gruntwork-io/terratest/modules/terraform"'
    - go test -v ./test
  tags:
    - linux
    - terraform

# Deploy section.
deploy:release:
  before_script:
    - 'echo "INFO: No Terraform download being performed."'
    - echo "CI_MERGE_REQUEST_IID:" $CI_MERGE_REQUEST_IID
    - echo "CI_COMMIT_TAG:" $CI_COMMIT_TAG
    - echo "CI_COMMIT_BRANCH:" $CI_COMMIT_BRANCH
    - echo "CI_COMMIT_REF_NAME:" $CI_COMMIT_REF_NAME
    - echo "CI_DEFAULT_BRANCH:" $CI_DEFAULT_BRANCH
    - echo "CI_PIPELINE_SOURCE" $CI_PIPELINE_SOURCE
    - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME:" $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  stage: deploy
  script:
    - VERSION="$(cat version)"
    - 'echo "INFO: Current version recorded in the version file: ${VERSION}"'
    - echo ${GITLAB_TOKEN}
    - 'curl -X POST --silent --show-error --fail -H "PRIVATE_TOKEN: ${GITLAB_TOKEN}" "https://<gitlab url>/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=v${VERSION}&ref=${CI_COMMIT_SHA}"'
  only:
    variables:
      - $CI_COMMIT_REF_NAME =~ /master/
  tags:
    - linux
    - terraform